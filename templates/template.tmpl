{{define "bulkInsertFile"}}
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

package {{.Package}}

import (
  "context"
  "fmt"
  "reflect"
  "strings"
)

{{.ExtractFn}}

{{.BuildFn}}

{{ $buildFnName := .BuildFnName }}
{{ $extractFnName := .ExtractFnName }}
{{range .BulkInsert}}
{{ $queryName := .QueryName }}
{{ $paramFieldNames := .ParamFieldNames }}
{{ $originalQueryConstantName := lowerTitle $queryName }} {{/* Query string constant name generated by the original sqlc */}}

// Bulk{{$queryName}}Params is a slice type of {{.QueryName}}Params.
// The {{.QueryName}}Params type is assumed to be generated by sqlc based on the original {{.QueryName}} query.
type Bulk{{$queryName}}Params []{{$queryName}}Params

// Bulk{{$queryName}} executes a bulk insert with the specified argument slice.
func (q *Queries) Bulk{{$queryName}}(ctx context.Context, args Bulk{{$queryName}}Params) error {
  if len(args) == 0 {
    return nil
  }

  // Query string constant name generated by the original sqlc
  originalQuery := {{$originalQueryConstantName}}

  // Define this as a variable in the Go code
  paramFieldNamesForQuery := {{stringSliceLiteral .ParamFieldNames}}

  bulkSQL, err := {{$buildFnName}}(originalQuery, len(args), len(paramFieldNamesForQuery))
  if err != nil {
    return fmt.Errorf("failed to build bulk insert query for {{$queryName}}: %w", err)
  }

  preparedValues, err := {{$extractFnName}}(args, paramFieldNamesForQuery)
  if err != nil {
    return fmt.Errorf("failed to extract field values for {{$queryName}}: %w", err)
  }

  if q.db == nil {
    return fmt.Errorf("Queries.db is nil")
  }
  _, err = q.db.ExecContext(ctx, bulkSQL, preparedValues...)
  return err
}
{{end}}
{{end}}
